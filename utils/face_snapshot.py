#!/usr/bin/env python3

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'jetson_interface.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import *
from PyQt5.QtMultimedia import *
from PyQt5.QtMultimediaWidgets import *
from PyQt5.QtGui import QImage , QPixmap
from PyQt5.uic import loadUi
import cv2
import os 
import sys 
import time 
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import numpy as np


def gstreamer_pipeline(
    capture_width=1280,
    capture_height=720,
    display_width=1280,
    display_height=720,
    framerate=30,
    flip_method=0,
    ):
    return (
        "nvarguscamerasrc ! "
        "video/x-raw(memory:NVMM), "
        "width=(int)%d, height=(int)%d, "
        "format=(string)NV12, framerate=(fraction)%d/1 ! "
        "nvvidconv flip-method=%d ! "
        "video/x-raw, width=(int)%d, height=(int)%d, format=(string)BGRx ! "
        "videoconvert ! "
        "video/x-raw, format=(string)BGR ! appsink"
        % (
            capture_width,
            capture_height,
            framerate,
            flip_method,
            display_width,
            display_height,
        )
    )



class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def __init__(self):
        super().__init__()
        self._run_flag = True

    def run(self):
        # capture from web cam
        self._run_flag = True
        self.cap = cv2.VideoCapture(gstreamer_pipeline(flip_method=2), cv2.CAP_GSTREAMER)
        while self._run_flag:
  
            ret, cv_img = self.cap.read()
            if ret:
                self.change_pixmap_signal.emit(cv_img)
        # shut down capture system
        self.cap.release()

    def stop(self):
        """Sets run flag to False and waits for thread to finish"""
        self._run_flag = False


class Ui_Main_window(QMainWindow):
    def setupUi(self):
        # create the video capture thread
        self.thread = VideoThread()        
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()    
        
        self.disply_width = 1280
        self.display_height = 720        
                
        font = QtGui.QFont()
        font.setPointSize(14)        
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")

        font = QtGui.QFont()
        font.setPointSize(11)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(200, 100, 880, 30)) 
        self.pushButton.setFont(font)
        self.pushButton.setDefault(True)
        self.pushButton.setObjectName("pushButton")


        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(200, 50, 880, 30))
        self.label1.setObjectName("label1")


        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 150, 1280, 720))
        self.label.setStyleSheet("border: 2px solid black;")
        self.label.setObjectName("label")

        font = QtGui.QFont()
        font.setPointSize(9)

        self.logic = 0 
        self.value = 1
    
        self.pushButton.clicked.connect(self.click_photo)

        self.setCentralWidget(self.centralwidget)
        self.save_seq = 0

       
        self.setWindowTitle("Snapshot Taker")
        self.pushButton.setText("Want a photo? Press here!!!")
        self.label1.setText("Hello, Take a photo of yourself")
        self.label1.setAlignment(Qt.AlignCenter)
    
        self.label.setText("Connecting to Camera...")
        self.label.setAlignment(Qt.AlignCenter)    


    def __init__(self): 
        super().__init__() 

		# creating a status bar 
        self.status = QStatusBar() 
		# setting style sheet to the status bar 
        self.status.setStyleSheet("background : white;") 
		# path to save 
        self.resize(1280, 870)
        self.save_path = "/jetson-exercise-tracker"
        self.capture_filename = ""
        self.person_name = ""


    def closeEvent(self, event):
        print("closing")
        time.sleep(1)
        self.thread.stop()
        
        event.accept() # let the window close


	# method to take photo 
    def click_photo(self): 

        if self.person_name == "":
            name, ok = QInputDialog.getText(self, "Snapshot Taker", "Enter your name:")
            if ok:
                self.person_name = name
                self.label1.setText(f"Hello {self.person_name}, Take a photo of yourself")
            return

		# time stamp 
        timestamp = time.strftime("%d-%b-%Y-%H_%M_%S") 

		# capture the image and save it on the save path 
        self.capture_filename = os.path.join(self.save_path, 
			"%04d-%s.jpg" % ( 
			self.save_seq, 
			timestamp 
		)) 

		# increment the sequence 
        self.save_seq += 1
        self.label1.setText(f"Hello {self.person_name}, photo taken: {self.save_seq}")
              

	# method for alerts 
    def alert(self, msg): 

		# error message 
        error = QErrorMessage(self) 

		# setting text to the error message 
        error.showMessage(msg) 

    def update_image(self, cv_img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(cv_img)
        self.label.setPixmap(qt_img)
        if self.capture_filename != "":
            cv2.imwrite(self.capture_filename, cv_img)
            self.capture_filename = ""


    def convert_cv_qt(self, cv_img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(cv_img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.disply_width, self.display_height, Qt.KeepAspectRatio)
        #p = convert_to_Qt_format.scaled(801, 801, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)
        


    def show_popup(self):
        msg = QMessageBox()
        msg.setWindowTitle("Take the photo")
        msg.setText("This is the right button")
        msg.setIcon(QMessageBox.Warning)
        msg.setStandardButtons(QMessageBox.Cancel|QMessageBox.Retry| QMessageBox.Ignore)
        msg.setDefaultButton(QMessageBox.Ignore)
        msg.setInformativeText("Are you really this stupid???")

        msg.setDetailedText("What were you really hoping to find after clicking the show details button????")

        x = msg.exec_()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_Main_window()
    ui.setupUi()
    ui.show()
    sys.exit(app.exec_())
